import com.github.jk1.license.render.JsonReportRenderer

/*
 * Copyright 2023 Kaleyra @ https://www.kaleyra.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'maven-publish'
    alias(catalog.plugins.dokka)
    alias(catalog.plugins.licenseReport)
}

apply from: '../sdkAndroid.gradle'
apply from: '../publish.gradle'
apply from: '../licenses.gradle'

android {
    kotlinOptions {
        freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn"
        ]
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                maxParallelForks = Runtime.runtime.availableProcessors()
                forkEvery = 100
            }
        }
    }
}

dependencies {
    /*** Platform ***/
    implementation catalog.androidxCoreKtx
    implementation catalog.androidxActivity
    implementation catalog.androidxComposeConstraintLayout
    coreLibraryDesugaring catalog.desugar
    implementation platform('androidx.compose:compose-bom:2024.02.02')
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.material3:material3'
    implementation("androidx.compose.material3:material3-window-size-class")
    implementation 'androidx.compose.foundation:foundation'
    implementation 'androidx.compose.runtime:runtime'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose'
    // TODO add dependency to catalog
    implementation("com.cheonjaeung.compose.grid:grid:2.0.0")
    debugImplementation 'androidx.compose.ui:ui-tooling'

    /*** Testing ***/
    testImplementation kaleyraCatalog.kaleyraVideo
    testImplementation catalog.robolectric
    testImplementation catalog.junit
    testImplementation catalog.androidxComposeUiTestJunit4
    testImplementation catalog.androidxTestEspressoIntents
    testImplementation catalog.coroutinesTest
    testImplementation catalog.mockkAndroid
    testImplementation catalog.androidxComposeUiTooling
    testImplementation catalog.androidxComposeUiTestManifest

    androidTestImplementation catalog.androidxTestRunner
    androidTestImplementation catalog.androidxTestEspressoCore
    androidTestImplementation catalog.androidxComposeUiTestJunit4
    androidTestImplementation catalog.mockkAndroid
    androidTestImplementation catalog.androidxTestEspressoIntents
    androidTestImplementation catalog.androidxComposeUiTooling
    androidTestImplementation catalog.androidxComposeUiTestManifest

    /** Kaleyra **/
    api kaleyraCatalog.kaleyraVideo
    implementation kaleyraCatalog.kaleyraVideoExtensionAudio

    def isPublishing = project.hasProperty("isPublishing")
    if (isPublishing) api "com.kaleyra:video-common-ui:$moduleVersion"
    else api project(':video-common-ui')
}

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/build/licenses"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies. Default is 'runtimeClasspath'
    // For Android projects use 'releaseRuntimeClasspath' or 'yourFlavorNameReleaseRuntimeClasspath'
    // Use 'ALL' to dynamically resolve all configurations:
    configurations = ALL

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    renderers = [new JsonReportRenderer('licenses.json', false)]
}

// workaround for mockk spyk(proxy)
// https://mockk.io/doc/md/jdk16-access-exceptions.html
tasks.withType(Test) {
    jvmArgs(
            "--add-opens", "java.base/java.time=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED"
    )
}
